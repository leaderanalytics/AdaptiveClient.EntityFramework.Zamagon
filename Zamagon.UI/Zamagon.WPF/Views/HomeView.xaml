<UserControl x:Class="Zamagon.WPF.Views.HomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:views="clr-namespace:Zamagon.WPF.Views"
             xmlns:localWPF="clr-namespace:Zamagon.WPF"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <ScrollViewer VerticalScrollBarVisibility="Auto">
    <StackPanel Orientation="Vertical" Margin="25" >
        <StackPanel.Resources>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>
        </StackPanel.Resources>
        <TextBlock>
            <Run FontWeight="Bold">What does this application demonstrate?</Run><LineBreak/>
            This application demonstrates AdaptiveClient's ability to attempt 
            to connect to a server and fall back to another server if the connection fails.  The servers may be of any type of transport or 
            technology provider.  For example, in the default configuration AdaptiveClient will attempt to connect to a MSSQL server. 
            It will fall back to a MySQL server if the connection fails, than fall back to a Web API server if the connection 
            fails a second time.
        </TextBlock>
        
        <TextBlock Margin="0,10,0,0">
            <Run FontWeight="Bold">How is this application used?</Run><LineBreak/>
            Each tab contains a list of EndPoints (connection strings) that point to database servers or API servers that AdaptiveClient 
            will attempt to reach.  The EndPoints can be re-ordered using drag-and-drop.  Only one EndPoint can be marked as Enabled.  
            <LineBreak/>
            When the Get Data button is clicked the application builds the Autofac Container - however mocks are registered 
            for the EndPoints that are not marked as Enabled.  After the Container is built, AdaptiveClient attempts to 
            contact each EndPoint, always starting with the one at top of the list.  If the connection is not marked as Enabled
            AdaptiveClient will encounter a mock, which throws an exception.  If the connection fails as it will in the case of 
            a mock, AdaptiveClient will log the error and try the next EndPoint.  If all connections fail AdaptiveClient will throw
            an exception.
        </TextBlock>

        <TextBlock Margin="0,10,0,0">
            <Run FontWeight="Bold">How is this application different from a normal application?</Run><LineBreak/>
            This application is designed to introduce errors into normal program flow.  In order to do this it 
            uses mocks, which require the Autofac Container to be created when database requests are made.  Normal programs
            that use AdaptiveClient build the Autofac Container once during application startup as is the recommended practice.
        </TextBlock>

    </StackPanel>
    </ScrollViewer>
</UserControl>
